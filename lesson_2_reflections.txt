

March 10, 2015

What happens when you initialize a repository? Why do you need to do it?

It creates the folder for the versions to start syncing. A repository is
useful because it will give me a single place to track all of the file
versions of a particular project. However, I still have a lot to learn
about how to actively use it.


How is the staging area different from the working directory and the repository? 
What value do you think it offers?

The staging area is just what it says. It seems to give us an opportunity to
double check what we are planning to commit before we do in between commits.


How can you use the staging area to make sure you have one commit per logical change?

Hmm. I suppose my answer isn't too different than the last answer, which makes me
think I might be missing something. However, one idea is that we can check to see
that the file we intended to modify is modified. If the staging area has too many
modified files in it, it might be that we didn't commit soon enough and need to reset
one or more of the items.


What are some situations when branches would be helpful in keeping your history organized?
How would branches help?

Pretty straightforward — whenever branching out matters. If we're going to create a
different version of the same code or if we want to experiment with a different
feature without changing the base code, we can create a new branch. Later, if we 
add features that we want to permanently affect the master branch, we can merge it
in.


How do the diagrams help you visualize the branch structure?

Man.. they pretty much make it bearable. My whole problem with trying to understand
Git on my own was I couldn't visualize what a commit was, what a repository was,
etc. But by seeing these things drawn out into boxes with arrows and what not, it
makes it something I can understand.


What is the result of merging two branches together? Why do we represent it in the 
diagram the way we do?

Merging two branches essentially includes all changes made on either file and combines
them into a single one. I don't fully understand it yet, but I recognize that there
is a process of certain lines needing to be reconciled with one another before a
merge is committed. I'll reiterate that having previous versions available to reference
gives a lot of security to move forward with a project.

I don't really know how to answer the second question except that it makes a lot
of sense. One branch is different from another branch, but once you merge them
together, it's as if all the steps completed should be reconciled as history of
the main branch. Yet prior to the merging, the commits themselves should be 
accessible on the previously separate branches.


What are the pros and cons of Git’s automatic merging vs. always doing merges manually?

I'd say the pro is obvious that you will probably ultimately save a lot of time
by letting Git determine where conflicts are so you can quickly resolve the code.
However, it might be a disadvantage when Git doesn't catch all the little nuances that
make the program different, as we saw in the example of 3 pieces of asteroid vs. 2.


